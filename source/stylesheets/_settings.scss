@import url(http://fonts.googleapis.com/css?family=Lato:100,300);

// // Global Foundation Mixins


// // Foundation Variables

// // The default font-size is set to 100% of the browser style sheet (usually 16px)
// // for compatibility with brower-based text zoom or user-set defaults.

// // Since the typical default browser font-size is 16px, that makes the calculation for grid size.
// // If you want your base font-size to be different and not have it effect the grid breakpoints,
// // set $rem-base to $base-font-size and make sure $base-font-size is a px value.
// $base-font-size: 100% !default;

// // $base-line-height is 24px while $base-font-size is 16px
$base-line-height: 150% !default;

// // This is the default html and body font-size for the base em value.
$rem-base: 16 !default;

// // It strips the unit of measure and returns it
// @function strip-unit($num) {
//   @return $num / ($num * 0 + 1);
// }

// // Converts "px" to "em" using the ($)em-base
// @function convert-to-rem($value, $base-value: $rem-base)  {
//   $value: strip-unit($value) / strip-unit($base-value) * 1em;
//   @if ($value == 0em) { $value: 0; } /* Turn 0em into 0*/
//   @return $value;
// }

// // Working in ems is annoying. Think in pixels by using this handy function, rem-calc(#)
// // Just enter the number, no need to mention "px"
// @function rem-calc($values, $base-value: $rem-base) {
//   $max: length($values); /* Get the total number of parameters passed*/

//   // If there is only 1 parameter, then return it as an integer.
//   // This is done because a list can\'t be multiplied or divided even if it contains a single value
//   @if $max == 1 { @return convert-to-rem(nth($values, 1), $base-value); }

//   $remValues: (); // This will eventually store the converted $values in a list
//   @for $i from 1 through $max {
//     $remValues: append($remValues, convert-to-rem(nth($values, $i), $base-value));
//   }
//   @return $remValues;
// }

// // We use these to control various global styles
$body-bg: #eee !default;
$body-font-color: #222 !default;
$body-font-family: "Lato", Helvetica, Arial, sans-serif;
$body-font-weight: 300;
$body-font-style: normal;
// $body-font-family: "Helvetica Neue", "Helvetica", Helvetica, Arial, sans-serif !default;
// $body-font-weight: normal !default;
// $body-font-style: normal !default;

// // We use these as default colors throughout
$primary-color: #2ba6cb !default;
$secondary-color: #e9e9e9 !default;
$alert-color: #c60f13 !default;
$success-color: #5da423 !default;

// // We use these to make sure border radius matches unless we want it different.
$global-radius: 6px !default;
// $global-rounded: 1000px !default;

// // We use these to control inset shadow shiny edges and depressions.
$shiny-edge-size: 0 0 0 !default;
$shiny-edge-color: rgba(#fff, .5) !default;
$shiny-edge-active-color: rgba(#000, .2) !default;

// // We use this to control whether or not CSS classes come through in the gem files.
$include-html-classes: true !default;
$include-print-styles: false !default;
$include-html-global-classes: $include-html-classes !default;

// // Media Queries
// $small-screen: 768px !default;
// $medium-screen: 1280px !default;
// $large-screen: 1440px !default;

// $screen: "only screen" !default;
// $small: "only screen and (min-width: #{$small-screen})" !default;
// $medium: "only screen and (min-width:#{$medium-screen})" !default;
// $large: "only screen and (min-width:#{$large-screen})" !default;
// $landscape: "only screen and (orientation: landscape)" !default;
// $portrait: "only screen and (orientation: portrait)" !default;

// // We use this as cursors values for enabling the option of having custom cursors
$cursor-crosshair-value: crosshair !default;
$cursor-default-value: default !default;
$cursor-pointer-value: pointer !default;
$cursor-help-value: help !default;
$cursor-text-value: text !default;

// // Set box-sizing globally to handle padding and border widths
// *,
// *:before,
// *:after {
//   @include box-sizing(border-box);
// }

// html,
// body { font-size: $base-font-size; }

// Default body styles
body {
  background: $body-bg;
  color: $body-font-color;
  padding: 0;
  margin: 0;
  font-family: $body-font-family;
  font-weight: $body-font-weight;
  font-style: $body-font-style;
  line-height: 10.0;
  position: relative;
  cursor: $cursor-default-value;
}

// a:hover { cursor: $cursor-pointer-value; }

// // Override outline from normalize, we do not like it
a:focus { outline: none; }

// // Grid Defaults to get images and embeds to work properly
// img,
// object,
// embed { max-width: 100%; height: auto; }

// object,
// embed { height: 100%; }
// img { -ms-interpolation-mode: bicubic; }

// #map_canvas,
// .map_canvas {
//   img,
//   embed,
//   object { max-width: none !important;
//   }
// }

// // Miscellaneous useful HTML classes
.left         { float: left !important; }
.right        { float: right !important; }
.text-left    { text-align: left !important; }
.text-right   { text-align: right !important; }
.text-center  { text-align: center !important; }
.text-justify { text-align: justify !important; }
.hide         { display: none; }

// // Font smoothing
// // Antialiased font smoothing works best for light text on a dark background.
// // Apply to single elements instead of globally to body.
// // Note this only applies to webkit-based desktop browsers on the Mac.
.antialiased { -webkit-font-smoothing: antialiased; }

// // Get rid of gap under images by making them display: inline-block; by default
img { display: inline-block; }

// // Make sure textarea takes on height automatically
textarea { height: auto; min-height: 50px; }

// // Make select elements 100% width by default
select { width: 100%; }











// $base-font-size: 100% !default;
// $em-base: 16 !default;
// @function strip-unit($num) {
// @return $num / ($num * 0 + 1);
// }
// @function convert-to-em($value)  {
// $value: strip-unit($value) / strip-unit($em-base) * 1em;
// @if ($value == 0em) { $value: 0; } // Turn 0em into 0
// @return $value;
// }
// @function emCalc($values...) {
// $max: length($values); // Get the total number of parameters passed
//   // If there is only 1 parameter, then return it as an integer.
// // This is done because a list can't be multiplied or divided even if it contains a single value
// @if $max == 1 { @return convert-to-em(nth($values, 1)); }
//   $emValues: (); // This will eventually store the converted $values in a list
// @for $i from 1 through $max {
//   $emValues: append($emValues, convert-to-em(nth($values, $i)));
// }
// @return $emValues;
// }
// $default-float: left;
// $body-bg: #eee;
// $body-font-color: #222;
// $body-font-family: "Lato", Helvetica, Arial, sans-serif;
// $body-font-weight: 300;
// $body-font-style: normal;
// $primary-color: #2ba6cb;
// $secondary-color: #e9e9e9;
// $alert-color: #c60f13;
// $success-color: #5da423;
// $global-radius: 6px;
// $shiny-edge-size: 0 0px 0;
// $include-html-classes: true;
// $include-print-styles: true;
// $include-html-orbit-classes: false;
// $include-html-reveal-classes: false;
// $include-html-joyride-classes: false;
// $include-html-alert-classes: false;
// $include-html-top-bar-classes: false;
// $include-html-label-classes: false;
// $include-html-pricing-classes: false;
// $include-html-progress-classes: false;
// $include-html-magellan-classes: false;
// $include-html-tooltip-classes: false;
// $column-gutter: emCalc(30);
// $header-font-family: $body-font-family;
// $header-font-weight: 300;
// $header-font-style: normal;
// $paragraph-line-height: 1.5;
$code-color: #eee;
$code-font-family: Inconsolas, Consolas, 'Liberation Mono', Courier, monospace;
$code-font-weight: normal;
// $list-style-position: inside;
// $button-font-weight: 300;
// $button-border-width: 0px;
// $button-border-style: none;
// $clearing-bg: $body-bg;
// $clearing-carousel-bg: $body-bg;
// $clearing-close-color: $body-font-color;
// $clearing-caption-font-color: $body-font-color;
// $clearing-active-img-height: 75%;
// $clearing-carousel-height: 75px;
// $clearing-carousel-thumb-width: 100px;
// $clearing-carousel-thumb-active-border: 4px solid rbg(255,0,0);
// $keystroke-font: Inconsolas, Consolas, 'Liberation Mono', Courier, monospace;
// $keystroke-font-size: emCalc(14);
// $keystroke-font-color: #f00;
$side-nav-link-color: #fff;
$side-nav-link-color-active: darken(#000, 30%);
$side-nav-font-weight: normal;
